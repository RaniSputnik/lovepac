// +build ignore

package main

import (
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
	"time"
)

type PackerTemplate struct {
	Name         string
	TemplateText string
}

func main() {
	f, err := os.Create("templates_generated.go")
	die(err)
	defer f.Close()

	templateSources, err := filepath.Glob("./*.template*")
	die(err)

	templates := make([]PackerTemplate, len(templateSources))
	for i, templateSource := range templateSources {
		f, err := os.Open(templateSource)
		die(err)
		defer f.Close()

		templateName := extractName(templateSource)
		templateText, err := ioutil.ReadAll(f)
		die(err)

		templates[i] = PackerTemplate{
			Name:         templateName,
			TemplateText: string(templateText),
		}
	}

	packageTemplate.Execute(f, struct {
		Timestamp time.Time
		Templates []PackerTemplate
	}{
		Timestamp: time.Now(),
		Templates: templates,
	})
}

func extractName(templateSource string) string {
	name := filepath.Base(templateSource)
	firstDotIndex := strings.IndexRune(name, '.')
	if firstDotIndex >= 0 {
		name = name[:firstDotIndex]
	}
	return strings.Title(name)
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at {{ .Timestamp }}
// TODO add the commit hash in here too

package templates

import (
	"text/template"
)
{{ range .Templates }}
var {{ .Name }} = template.Must(template.New("{{ .Name }}").Parse(` + "`{{ .TemplateText }}`" + `))
{{ end }}
`))
